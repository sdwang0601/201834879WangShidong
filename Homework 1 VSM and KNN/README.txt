项目介绍：
代码文件：VSMandKNN.py
其他文件夹：testdata，traindata,etc. save data.

VSMandKNN.py
代码实现的主要功能介绍如下：

1.预处理：
将原数据划分为训练数据和测试数据，划分范围为为训练80%，测试20%
划分方法为对于每一个文件夹的多个文档，每读取八个文档放到训练数据，就读两个文档放到测试数据
其中：
1）预处理函数pretreat（）完成划分并调用writedata(path1,path2): 函数完成写数据操作；
2）写数据函数writedata(path1,path2): path1:原数据存储路径；path2:处理后的数据的输出路径
   并用nltk进行一些文本的简单处理，eg:去停词，提取词干，去掉数字等只保留字母,并把单词转换为小写字母等
   （装nltk文件包的时候一直报错，所以没有全选，只装了用到的包）

2.VSM：
建立字典，计算tf-idf值，生成向量vector
1）creatidf()：
   生成带着idf值得全局字典，其中为减少数据处理，通过计算词频（词出现次数）筛选掉一些词频较小得单词
2）creatvector(inpath,outpath): inpath:原数据存储路径；outpath:生成的向量的存储路径
   遍历文本，对每一个文本中的每一个单词计算tf的值，然后计算每一个单词tf-idf值，
   生成每一个文本的tf-idf字典，对tf-idf字典进行降序排列，只选取前50个单词tfidf值，生成新的tfidf字典，
   然后加上其所属的类别作为一个向量，将其作为一条数据加入到list集中，
   最后用json的方式，将list向量集存储到对应的json文件

3.KNN：
设定K的值，算出每一对向量的相似程度（余弦大小 = AB/|A|*|B|），得出预测类别，比较得出预测准确率
1）qiumo(vc)：
   vc:从json文件中读出的list，格式为：[[str,dict],[str,dict],[str,dict]]
   对于每个向量求出其模的大小，存为list
2）knn():
   设定K的值，对于测试集的每一个向量，让其与训练集里的所有向量进行比较，保留下前K个与其最相似（cos值大）的向量，
   统计出前k个中出现的最多次数的类别，此类别为模型的预测类别，让其与该向量的真实类别比较，若相同，即为预测成功，
   对于全部的测试向量，计算出预测成功次数除以总测试次数，即为预测成功率。
